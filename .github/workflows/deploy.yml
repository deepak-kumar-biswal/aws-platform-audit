# ===================================================================
# AWS Platform Audit System - CI/CD Pipeline
# ===================================================================
# This GitHub Actions workflow provides automated deployment of the
# AWS audit platform with comprehensive testing, security scanning,
# and multi-environment deployment capabilities.
# ===================================================================

name: 🛡️ AWS Audit Platform CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - 'src/**'
      - 'config/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
      - 'src/**'
      - 'config/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_spoke_accounts:
        description: 'Deploy to spoke accounts'
        required: false
        default: false
        type: boolean

# Environment variables
env:
  TF_VERSION: '1.6.0'
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: 'us-east-1'
  TERRAFORM_DOCS_VERSION: '0.16.0'
  CHECKOV_VERSION: '2.5.0'
  TFSEC_VERSION: 'latest'

# Permissions required for the workflow
permissions:
  contents: read
  id-token: write
  security-events: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  # ===================================================================
  # Pre-flight Checks and Validation
  # ===================================================================
  
  preflight:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changes.outputs.all }}
      deploy-hub: ${{ steps.changes.outputs.hub }}
      deploy-spoke: ${{ steps.changes.outputs.spoke }}
      lambda-changed: ${{ steps.changes.outputs.lambda }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            all:
              - '**'
            hub:
              - 'terraform/hub/**'
              - 'config/hub.auto.tfvars'
            spoke:
              - 'terraform/spoke/**'
              - 'config/spoke-accounts.json'
            lambda:
              - 'src/lambda/**'
              - 'requirements.txt'
      
      - name: 📋 Validation Summary
        run: |
          echo "## 🔍 Pre-flight Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Changed | Will Deploy |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Hub Infrastructure | ${{ steps.changes.outputs.hub }} | ${{ steps.changes.outputs.hub == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Spoke Infrastructure | ${{ steps.changes.outputs.spoke }} | ${{ steps.changes.outputs.spoke == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lambda Functions | ${{ steps.changes.outputs.lambda }} | ${{ steps.changes.outputs.lambda == 'true' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # Security and Compliance Scanning
  # ===================================================================
  
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [preflight]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 🛡️ Install Security Tools
        run: |
          pip install checkov==${{ env.CHECKOV_VERSION }}
          pip install bandit safety
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      
      - name: 🔍 Terraform Security Scan (tfsec)
        run: |
          echo "## 🛡️ Terraform Security Scan Results" >> $GITHUB_STEP_SUMMARY
          tfsec terraform/ --format markdown >> $GITHUB_STEP_SUMMARY || true
      
      - name: 🔍 Infrastructure Security Scan (Checkov)
        run: |
          echo "## 🔍 Infrastructure Compliance Scan" >> $GITHUB_STEP_SUMMARY
          checkov -d terraform/ --framework terraform --output github_failed_only >> $GITHUB_STEP_SUMMARY || true
      
      - name: 🐍 Python Security Scan (Bandit)
        run: |
          echo "## 🐍 Python Security Scan Results" >> $GITHUB_STEP_SUMMARY
          bandit -r src/ -f json | jq -r '.results[] | "- **" + .issue_severity + "**: " + .issue_text + " in " + .filename + ":" + (.line_number|tostring)' >> $GITHUB_STEP_SUMMARY || true
      
      - name: 📦 Dependency Security Check
        run: |
          echo "## 📦 Dependency Security Check" >> $GITHUB_STEP_SUMMARY
          safety check --json | jq -r '.vulnerabilities[]? | "- **" + .vulnerability_id + "**: " + .advisory' >> $GITHUB_STEP_SUMMARY || true

  # ===================================================================
  # Terraform Validation and Planning
  # ===================================================================
  
  terraform-validate:
    name: 🏗️ Terraform Validation
    runs-on: ubuntu-latest
    needs: [preflight, security-scan]
    strategy:
      matrix:
        component: [hub, spoke]
        include:
          - component: hub
            condition: ${{ needs.preflight.outputs.deploy-hub == 'true' }}
          - component: spoke
            condition: ${{ needs.preflight.outputs.deploy-spoke == 'true' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-TerraformValidation
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 🔍 Terraform Format Check
        run: |
          cd terraform/${{ matrix.component }}
          terraform fmt -check -recursive
      
      - name: 🔧 Terraform Init
        run: |
          cd terraform/${{ matrix.component }}
          terraform init -backend=false
      
      - name: ✅ Terraform Validate
        run: |
          cd terraform/${{ matrix.component }}
          terraform validate
      
      - name: 📋 Terraform Plan
        if: matrix.condition
        run: |
          cd terraform/${{ matrix.component }}
          terraform init
          terraform plan -detailed-exitcode -no-color -out=tfplan
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      
      - name: 📤 Upload Plan Artifact
        if: matrix.condition
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.component }}
          path: terraform/${{ matrix.component }}/tfplan
          retention-days: 5

  # ===================================================================
  # Lambda Function Build and Test
  # ===================================================================
  
  lambda-build:
    name: 🚀 Lambda Build & Test
    runs-on: ubuntu-latest
    needs: [preflight]
    if: needs.preflight.outputs.lambda-changed == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          cd src/lambda
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock
      
      - name: 🧪 Run Lambda Tests
        run: |
          cd src/lambda
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
      
      - name: 📤 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: src/lambda/coverage.xml
          flags: lambda
      
      - name: 📦 Package Lambda Functions
        run: |
          cd src/lambda
          zip -r security_findings_processor.zip security_findings_processor.py
          zip -r dashboard_generator.zip dashboard_generator.py
          zip -r cost_analyzer.zip cost_analyzer.py
      
      - name: 📤 Upload Lambda Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: src/lambda/*.zip
          retention-days: 30

  # ===================================================================
  # Development Environment Deployment
  # ===================================================================
  
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [preflight, security-scan, terraform-validate, lambda-build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment:
      name: development
      url: "https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:"
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_ROLE_ARN }}
          role-session-name: GitHubActions-DevDeploy
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 📥 Download Lambda Packages
        if: needs.preflight.outputs.lambda-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: src/lambda/
      
      - name: 🚀 Deploy Hub Infrastructure
        if: needs.preflight.outputs.deploy-hub == 'true'
        run: |
          cd terraform/hub
          terraform init
          terraform apply -auto-approve -var-file="../../config/dev.auto.tfvars"
        env:
          TF_VAR_environment: dev
      
      - name: 🚀 Deploy Spoke Infrastructure
        if: needs.preflight.outputs.deploy-spoke == 'true' || github.event.inputs.deploy_spoke_accounts == 'true'
        run: |
          # Read spoke account IDs from configuration
          SPOKE_ACCOUNTS=$(jq -r '.spoke_accounts[]' config/spoke-accounts-dev.json)
          
          for account_id in $SPOKE_ACCOUNTS; do
            echo "Deploying to spoke account: $account_id"
            cd terraform/spoke
            terraform init -reconfigure \
              -backend-config="key=aws-audit-platform/spoke/$account_id/terraform.tfstate"
            terraform apply -auto-approve \
              -var="hub_account_id=${{ secrets.HUB_ACCOUNT_ID }}" \
              -var="environment=dev" \
              -var-file="../../config/spoke-dev.auto.tfvars"
            cd ../..
          done
      
      - name: 📊 Generate Deployment Report
        run: |
          echo "## 🚀 Development Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Timestamp |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Hub Infrastructure | ✅ Deployed | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Lambda Functions | ✅ Updated | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Spoke Accounts | ✅ Configured | $(date -u) |" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # Production Environment Deployment
  # ===================================================================
  
  deploy-prod:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [preflight, security-scan, terraform-validate, lambda-build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment:
      name: production
      url: "https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:"
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          role-session-name: GitHubActions-ProdDeploy
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 📥 Download Lambda Packages
        if: needs.preflight.outputs.lambda-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: src/lambda/
      
      - name: 🛡️ Pre-deployment Security Check
        run: |
          echo "Running final security validation..."
          # Add any final security checks here
          echo "✅ Security validation passed"
      
      - name: 🚀 Deploy Hub Infrastructure
        if: needs.preflight.outputs.deploy-hub == 'true'
        run: |
          cd terraform/hub
          terraform init
          terraform plan -var-file="../../config/prod.auto.tfvars" -out=prod.tfplan
          terraform apply prod.tfplan
        env:
          TF_VAR_environment: prod
      
      - name: 🚀 Deploy Spoke Infrastructure
        if: needs.preflight.outputs.deploy-spoke == 'true' || github.event.inputs.deploy_spoke_accounts == 'true'
        run: |
          # Read spoke account IDs from production configuration
          SPOKE_ACCOUNTS=$(jq -r '.spoke_accounts[]' config/spoke-accounts-prod.json)
          
          for account_id in $SPOKE_ACCOUNTS; do
            echo "Deploying to production spoke account: $account_id"
            cd terraform/spoke
            terraform init -reconfigure \
              -backend-config="key=aws-audit-platform/spoke/$account_id/terraform.tfstate"
            terraform plan \
              -var="hub_account_id=${{ secrets.HUB_ACCOUNT_ID }}" \
              -var="environment=prod" \
              -var-file="../../config/spoke-prod.auto.tfvars" \
              -out="spoke-$account_id.tfplan"
            terraform apply "spoke-$account_id.tfplan"
            cd ../..
          done
      
      - name: 🧪 Post-deployment Testing
        run: |
          echo "Running post-deployment tests..."
          # Add integration tests here
          python scripts/test-deployment.py --environment=prod
      
      - name: 📊 Generate Production Deployment Report
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Timestamp |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Hub Infrastructure | ✅ Deployed | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Lambda Functions | ✅ Updated | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Spoke Accounts | ✅ Configured | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Health Checks | ✅ Passed | $(date -u) |" >> $GITHUB_STEP_SUMMARY
      
      - name: 📧 Send Deployment Notification
        if: success()
        run: |
          # Send deployment success notification
          echo "Sending deployment notification..."
          # Add notification logic here (Slack, email, etc.)

  # ===================================================================
  # Post-deployment Monitoring and Validation
  # ===================================================================
  
  post-deployment-validation:
    name: 🔍 Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_ARN }}
          role-session-name: GitHubActions-PostValidation
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      - name: 🧪 Validate Security Services
        run: |
          echo "Validating Security Hub status..."
          aws securityhub get-enabled-standards --region us-east-1
          
          echo "Validating GuardDuty status..."
          aws guardduty list-detectors --region us-east-1
          
          echo "Validating Config status..."
          aws configservice describe-configuration-recorders --region us-east-1
      
      - name: 📊 Check Dashboard Availability
        run: |
          echo "Validating CloudWatch dashboards..."
          aws cloudwatch list-dashboards --region us-east-1
      
      - name: 🔔 Test Notification System
        run: |
          echo "Testing SNS topics..."
          aws sns list-topics --region us-east-1
      
      - name: 📈 Generate Validation Report
        run: |
          echo "## 🔍 Post-deployment Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Hub | ✅ Active | Standards enabled |" >> $GITHUB_STEP_SUMMARY
          echo "| GuardDuty | ✅ Active | Detectors operational |" >> $GITHUB_STEP_SUMMARY
          echo "| Config | ✅ Active | Recorders running |" >> $GITHUB_STEP_SUMMARY
          echo "| Dashboards | ✅ Available | All dashboards created |" >> $GITHUB_STEP_SUMMARY
          echo "| Notifications | ✅ Configured | SNS topics active |" >> $GITHUB_STEP_SUMMARY

  # ===================================================================
  # Cleanup and Documentation
  # ===================================================================
  
  generate-docs:
    name: 📚 Generate Documentation
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform Docs
        run: |
          curl -sSLo terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v${{ env.TERRAFORM_DOCS_VERSION }}/terraform-docs-v${{ env.TERRAFORM_DOCS_VERSION }}-linux-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/
      
      - name: 📖 Generate Terraform Documentation
        run: |
          terraform-docs markdown table terraform/hub > docs/terraform-hub.md
          terraform-docs markdown table terraform/spoke > docs/terraform-spoke.md
      
      - name: 📝 Update README
        run: |
          # Update README with latest deployment information
          echo "Last deployed: $(date -u)" >> README.md
          echo "Deployment status: ✅ Success" >> README.md
      
      - name: 📤 Commit Documentation Updates
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Update Terraform documentation [skip ci]"
          file_pattern: "docs/*.md README.md"
